---
import { Icon } from "astro-icon/components";
import { theme } from "src/store";

const t = theme.subscribe((currentTheme) => {
  return currentTheme;
});

export type Theme = "system" | "dark" | "light";

const themesIcons: Map<Theme, string> = new Map([
  ["system", "circle_half"],
  ["dark", "moon_fill"],
  ["light", "sun_fill"],
]);
---

<div id="theme-switcher">
  <button
    class="relative inline-flex items-center gap-2 bg-primary text-white rounded p-3"
    id="theme-toggler"
    data-toggle="dropdown"
    type="button"
    aria-controls="theme-menu"
    aria-haspopup="true"
    aria-expanded="false"
  >
    <Icon name="circle_half" />
    <span class="sr-only">System</span>
    <Icon class="transition-transform duration-300" name="caret_down_fill" />
  </button>
  <ul
    class="absolute md:right-0 hidden p-2 mt-2 border rounded bg-white dark:bg-dark"
    id="theme-menu"
    aria-labelledby="theme-toggler"
    role="menu"
  >
    {
      Array.from(themesIcons.entries()).map(([theme, icon]) => {
        return (
          <li role="presentation">
            <button
              class="inline-flex items-center gap-2 w-full py-1 px-2 rounded hover:bg-primary hover:text-white "
              data-theme-value={theme}
              type="button"
              role="menuitem"
            >
              <Icon name={icon} />
              <span class="capitalize">{theme}</span>
            </button>
          </li>
        );
      })
    }
  </ul>
</div>

<script>
  import Dropdown from "@scripts/dropdown";

  const rootElement = document.documentElement;

  document.addEventListener("astro:page-load", () => {
    const themeSwitcher = new Dropdown(
      document.getElementById("theme-switcher")!,
      switchTheme
    );

    const darkThemeQuery = window.matchMedia("(prefers-color-scheme:dark)");

    const getStoredTheme = () => localStorage.getItem("theme");
    const setStoredTheme = (theme: string) =>
      localStorage.setItem("theme", theme);

    const getPreferredTheme = () => {
      const storedTheme = getStoredTheme();
      if (storedTheme) {
        return storedTheme;
      }

      return darkThemeQuery.matches ? "dark" : "light";
    };

    setTheme(getPreferredTheme());

    function setTheme(theme: string) {
      if (theme === "dark" || (theme === "system" && darkThemeQuery.matches)) {
        rootElement.classList.add("dark");
      } else {
        rootElement.classList.remove("dark");
      }
    }

    function switchTheme(node: HTMLElement) {
      const theme = node.dataset.themeValue;

      switch (theme) {
        case "light":
          setTheme(theme);
          setStoredTheme(theme);

          break;
        case "dark":
          setTheme(theme);
          setStoredTheme(theme);
          break;
        case "system":
          localStorage.removeItem("theme");
          setTheme(getPreferredTheme());
          break;
      }
    }
  });

  document.addEventListener("astro:after-swap", () => {
    if (localStorage.theme === "dark" || !("theme" in localStorage)) {
      rootElement.classList.add("dark");
    } else {
      rootElement.classList.remove("dark");
    }
  });
</script>
