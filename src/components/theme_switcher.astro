---
import Icon from "@components/icon.astro";
import { currentTheme } from "@store/theme";
import type { IconKey, Theme } from "src/env";

const themeIcons: Map<Theme, IconKey> = new Map([
  ["dark", "moon-stars-fill"],
  ["light", "sun-fill"],
  ["system", "circle-half"],
]);
---

<theme-switcher class="relative">
  <button
    class="inline-flex items-center gap-2 bg-primary text-white rounded p-3"
    data-toggle="menu"
    type="button"
    aria-controls="theme-menu"
    aria-haspopup="true"
    aria-expanded="false"
  >
    <Icon name={themeIcons.get(currentTheme.value)} />
    <span class="sr-only">{currentTheme}</span>
    <Icon class="transition-transform duration-300" name="caret-down-fill" />
  </button>
  <ul
    class="absolute md:right-0 hidden p-2 mt-2 border rounded bg-white dark:bg-dark"
    id="theme-menu"
    aria-labelledby="theme-menu-toggler"
    role="menu"
  >
    {
      Array.from(themeIcons.entries()).map(([theme, icon]) => {
        return (
          <li role="presentation">
            <button
              class="inline-flex items-center gap-2 w-full py-1 px-2 rounded hover:bg-primary hover:text-white "
              data-theme={theme}
              type="button"
              role="menuitem"
            >
              <Icon name={icon} />
              <span class="capitalize">{theme}</span>
            </button>
          </li>
        );
      })
    }
  </ul>
</theme-switcher>

<script>
  import { currentTheme } from "@store/theme";

  const rootElement = document.documentElement;

  class ThemeSwitcher extends HTMLElement {
    constructor() {
      super();

      const menuButton = this.querySelector(
        "[data-toggle=menu]"
      ) as HTMLButtonElement;
      const themeMenu = this.querySelector("[role=menu]") as HTMLElement;
      menuButton?.addEventListener("click", toggleMenu);

      const menuItems = this.querySelectorAll("[role=menuitem]");
      menuItems.forEach((menuitem) => {
        menuitem.addEventListener("click", handleClick);
      });

      function toggleMenu() {
        const isOpen = menuButton.getAttribute("aria-expanded") === "true";
        isOpen
          ? themeMenu.classList.add("hidden")
          : themeMenu.classList.remove("hidden");

        menuButton.setAttribute("aria-expanded", String(!isOpen));
      }

      function handleClick(event: Event) {
        const theme = event.target
          .closest("button")
          .getAttribute("data-theme") as Theme;

        setTheme(theme);
        toggleMenu();
      }
    }
  }

  function setTheme(theme: Theme) {
    switch (theme) {
      case "dark":
        rootElement.classList.add("dark");
        localStorage.setItem("theme", theme);
        currentTheme.set(theme);
        console.log(currentTheme);
        break;
      case "light":
        rootElement.classList.remove("dark");
        localStorage.setItem("theme", theme);
        currentTheme.set(theme);
        console.log(currentTheme);
        break;
      case "system":
        if (window.matchMedia("(prefers-color-scheme:dark)").matches) {
          rootElement.classList.add("dark");
        } else rootElement.classList.remove("dark");
        localStorage.removeItem("theme");
        currentTheme.set(theme);
        console.log(currentTheme);
        break;

      default:
        break;
    }
  }

  customElements.define("theme-switcher", ThemeSwitcher);

  document.addEventListener("astro:after-swap", () => {
    if (
      localStorage.theme === "dark" ||
      (!("theme" in localStorage) &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      rootElement.classList.add("dark");
    } else {
      rootElement.classList.remove("dark");
    }
  });
</script>
